buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}


plugins {
    id 'base'
    id 'java'
    id 'org.springframework.boot' version '2.7.7'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"

    annotationProcessor(

            "javax.persistence:javax.persistence-api",

            "javax.annotation:javax.annotation-api",

            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa")

    implementation 'org.modelmapper:modelmapper:3.1.0'

    implementation 'org.springframework.boot:spring-boot-starter-validation'

    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5','io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-gson:0.11.5'

    implementation 'com.google.code.gson:gson:2.10.1'

}

tasks.named('test') {
    useJUnitPlatform()
}

task "mycompile" {

    println("I am the task MyTask")


    println(tasks.getByName('clean'))


    Delete clean = tasks.getByName("clean")

//    delete fileTree ("$projectDir/build/generated") {
//        include '**/*'
//    }

}

//mycompile.dependsOn('clean')

compileJava.dependsOn('clean')



sourceSets {
    main {
        java {
            srcDirs = ["$projectDir/src/main/java", "$projectDir/build/generated"]
        }
    }
}